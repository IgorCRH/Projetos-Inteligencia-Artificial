# -*- coding: utf-8 -*-
"""CalculadordeLucroeRiscoEstimados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dyFqg-LNRMghQRHuPURh3sUxO3BLmeRo

Importando as Bibiliotecas
"""

import random

"""Dados das Ações do Enunciado"""

acoesempresas = [
    ["Banco Brasil ON", "BBAS3", 0.37, 2.48],
    ["Bradesco PN", "BBDC4", 0.24, 2.16],
    ["Eletrobrás PNB", "ELET6", 0.14, 1.95],
    ["Gerdau PN", "GGBR4", 0.30, 2.93],
    ["Itausa PN", "ITSA4", 0.24, 2.40],
    ["Petrobras PN", "PETR4", 0.19, 2.00],
    ["Sid Nacional ON", "CSNA3", 0.28, 2.63],
    ["Telemar PN", "TNLP4", 0.18, 2.14],
    ["Usiminas PNA", "USIM5", 0.25, 2.73],
    ["Vale PNA", "VALE5", 0.24, 2.47],
    ["Magalu MGLU3", "MGLU3", 0.31, 2.7],
    ["Hapvida HAPV3", "HAPV3", 0.26, 2.13],
    ["Boa Vista S.A BRAV2", "BRAV2", 0.33, 2.00],
    ["Espacolaser ESPA3", "ESPA3", 0.23, 2.20],
    ["Focus Energia POWE3", "POWE3", 0.29, 1.99],
    ["HBR Realty HBRE3", "HBRE3", 0.32, 2.83],
    ["CSN Mineração CMIN3", "CMIN3", 0.22, 2.65],
    ["Intelbras INTB3", "INTB3", 0.30, 2.80],
    ["Méliuz S.A. CASH3", "CASH3", 0.23, 2.32],
    ["Mosaico MOSI3", "MOSI3", 0.25, 2.16],
    ["Simpar S.A. SEQL3", "SEQL3", 0.25, 2.65],
    ["Vamos VAMO3", "VAMO3", 0.25, 2.50],
    ["Westwing WEST3", "WEST3", 0.27, 2.53]
]

"""Definindo População e Cromossomo"""

tamanhocromossomo = len(acoes_empresas)

taxademutacao = 0.1

tamanhopopulacao = 23

"""Inicialização da População"""

def inicializarpopulacao():
  return [[random.randint(0,1) for _ in range(tamanhocromossomo)] for _ in range (tamanhopopulacao)]

"""Calcular Lucro e Risco Estimado"""

def calcular_lucro_risco_estimado(conjunto):
  lucroestimado = 0
  riscoestimado = 0

  for i in range (tamanhopopulacao):
    lucroestimado += conjunto[i] * acoesempresas[i][2]
    riscoestimado += conjunto[i] * acoesempresas[i][3]
  return lucroestimado,riscoestimado

"""Seleção, Cruzamento e Mutação"""

def selecao(populacao):
  return sorted(populacao, key=lambda x:calcular_lucro_risco_estimado(x)[0],reverse=True)[:int(tamanhopopulacao/2)]

def cruzamento(empresa1,empresa2):
  ponto_de_cruzamento = random.randint(1, tamanhocromossomo - 1)

  empresafilha1 = empresa1[ponto_de_cruzamento:] + empresa2[:ponto_de_cruzamento]
  empresafilha2 = empresa2[ponto_de_cruzamento:] + empresa1[:ponto_de_cruzamento]
  return empresafilha1,empresafilha2

def mutacao(empresa):
  populacaomutacao = []

  for i in range (tamanhocromossomo):
      if random.random() < taxademutacao:
        empresa[i] = 1 - empresa[i]

  return empresa

"""Definindo o Algoritmo"""

def algoritmo(objetivo_risco):
    populacao = inicializarpopulacao()
    geracoes = 100
    for _ in range(geracoes):
        populacao = selecao(populacao)
        novapopulacao = []
        while len(novapopulacao) < tamanhopopulacao:
            empresa1 = random.choice(populacao)
            empresa2 = random.choice(populacao)
            empresafilha1, empresafilha2 = cruzamento(empresa1, empresa2)
            empresafilha1 = mutacao(empresafilha1)
            empresafilha2 = mutacao(empresafilha2)
            novapopulacao.append(empresafilha1)
            novapopulacao.append(empresafilha2)
        populacao = novapopulacao
    melhorconjunto = max(populacao, key=lambda x: calcular_lucro_risco_estimado(x)[0])
    melhorretorno, melhorrisco = calcular_lucro_risco_estimado(melhorconjunto)
    print("Melhor retorno para um risco de {}%: {}%".format(objetivo_risco, melhorretorno))

    nome_empresa_maior_retorno = [acoesempresas[i][0] for i in range(len(melhorconjunto)) if melhorconjunto[i] == 1]
    print("Empresa com ação de maior retorno no conjunto com melhor retorno e risco: {}".format(nome_empresa_maior_retorno[0]))


algoritmo(10)
algoritmo(20)
algoritmo(25)
algoritmo(30)

