# -*- coding: utf-8 -*-
"""OtimizadordeFuncaoAckley.ipynb

Automatically generated by Colaboratory.

Importações e Instalações Necessárias
"""

import numpy as np

"""Definindo a Função de Ackley e Gerando População Inicial"""

def funcaoackley(x):
    a = 20
    b = 0.2
    c = 2 * np.pi
    sum1 = np.sum(x**2)
    sum2 = np.sum(np.cos(c * x))
    n = len(x)
    return -a * np.exp(-b * np.sqrt(1/n * sum1)) - np.exp(1/n * sum2) + a + np.exp(1)

def gerandopopulacao(tamanhopopulacao, dim):
    return np.random.uniform(low=-5, high=5, size=(tamanhopopulacao, dim))

"""Avaliando a População e Seleção dos Pais"""

def avaliapopulacao(populacao):
  return np.apply_along_axis(funcaoackley, 1, populacao)

def selecionarpais(populacao,fitness,numeropais):
  pais = np.empty((numeropais, populacao.shape[1]))

  for i in range (numeropais):
    indicesrandomicos = np.random.randint(0, len(populacao), size=2)
    indiceescolhido = indicesrandomicos[np.argmin(fitness[indicesrandomicos])]
    pais[i,:] = populacao [indiceescolhido,:]

    return pais

"""Cruzamento e Mutação"""

def cruzamento (pais,tamanhodaprole):
  prole = np.empty(tamanhodaprole)
  pontodecruzamento = np.random.randint(0, tamanhodaprole[1] - 1)

  for k in range(tamanhodaprole[0]):
    indicepai1 = k % pais.shape[0]
    indicepai2 = (k+1) % pais.shape[0]
    prole[k, 0:pontodecruzamento] = pais[indicepai1,0:pontodecruzamento]
    prole [k, pontodecruzamento:] = pais[indicepai2,pontodecruzamento:]
  return prole

def mutacao(prolecruzamento,taxamutacao):
  for indice in range (prolecruzamento.shape[0]):
    for gene in range (prolecruzamento.shape[1]):
      if np.random.uniform(0,1) < taxamutacao:
        prolecruzamento[indice, gene] += np.random.uniform (0,1)
        return prolecruzamento

"""Gerando População Inicial e Iterar"""

tamanhopopulacao = int(input("Informe o valor do tamanho da populacao: "))
numerodegeracoes = int(input("Informe o valor do numero de geracoes: "))
taxamutacao = 0.1

populacao = gerandopopulacao(tamanhopopulacao, 2)
fitness =  avaliapopulacao(populacao)

for geracao in range (numerodegeracoes):
  numeropais = int(tamanhopopulacao / 2)
  pais = selecionarpais(populacao,fitness,numeropais)
  prolecruzamento = cruzamento(pais,tamanhodaprole = (tamanhopopulacao - pais.shape[0], 2))
  prolemutacao = mutacao(prolecruzamento, taxamutacao)

  populacao[0:pais.shape[0], :] = pais
  populacao[pais.shape[0]:, :] = prolemutacao

  fitness = avaliapopulacao(populacao)

melhorindice = np.argmin(fitness)
melhorsolucao = populacao[melhorindice, :]
melhorfitness = fitness[melhorindice]

print("Melhor solução encontrada:")
print("Coordenadas:", melhorsolucao)
print("Valor da função de Ackley:", melhorfitness)

