# -*- coding: utf-8 -*-
"""PredicaodeCrimesnoEstadodeMinasGerais.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bkFZBxQ6Vv56TCc5Ld811dMUZ8xj_zu2

Importação das Bibiliotecas e Datasets
"""

import pandas as pd
from google.colab import files

# Carrega todos os arquivos CSV enviados
uploaded = files.upload()

# Inicializa uma lista para armazenar os DataFrames
datasets = []

# Lê os arquivos CSV e adiciona os DataFrames à lista
for filename in uploaded.keys():
    dataset = pd.read_csv(filename)
    datasets.append(dataset)

# Concatena todos os DataFrames em um único DataFrame
full_df = pd.concat(datasets, ignore_index=True)

# Salva o DataFrame combinado em um arquivo CSV
full_df.to_csv('output.csv', index=False)

"""Informações Estatísticas"""

full_df.describe()
print(full_df.head())

"""Crimes que mais ocorreram"""

from matplotlib import pyplot as plt
import seaborn as sns

# Calcular a soma dos registros para cada natureza (tipo de crime)
crime_counts = full_df.groupby('natureza')['registros'].sum()

# Selecionar as naturezas que tiveram o maior número de registros
top_crimes = crime_counts.nlargest(10)

# Plotar um gráfico de barras com as naturezas que tiveram mais registros
plt.figure(figsize=(12, 8))
top_crimes.plot(kind='bar')
plt.title('Top 10 Crimes Mais Comuns')
plt.xlabel('Tipo de Crime')
plt.ylabel('Número de Registros')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Municípios com maior ocorrência de crimes"""

# Calcular a soma dos registros para cada município
municipio_counts = full_df.groupby('municipio')['registros'].sum()

# Selecionar os municípios que tiveram o maior número de registros
top_municipios = municipio_counts.nlargest(10)

# Plotar um gráfico de barras com os municípios que tiveram mais registros
plt.figure(figsize=(12, 8))
top_municipios.plot(kind='bar')
plt.title('Top 10 Municípios com Mais Ocorrências de Crimes')
plt.xlabel('Município')
plt.ylabel('Número de Registros')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Municípios com maiores números de ocorrências de Estupro Consumado e Estupro de Vulnerável Consumado"""

# Filtrar o DataFrame para incluir apenas as ocorrências de 'Estupro Consumado'
estupro_consumado_df = full_df[full_df['natureza'] == 'Estupro Consumado']

# Calcular o número total de ocorrências de 'Estupro Consumado' para cada município
estupro_consumado_counts = estupro_consumado_df.groupby('municipio')['registros'].sum()

# Selecionar os municípios que tiveram o maior número de ocorrências de 'Estupro Consumado'
top_municipios_estupro_consumado = estupro_consumado_counts.nlargest(10)

# Plotar um gráfico de barras com os municípios que tiveram as maiores ocorrências de 'Estupro Consumado'
plt.figure(figsize=(12, 8))
top_municipios_estupro_consumado.plot(kind='bar')
plt.title('Top 10 Municípios com Mais Ocorrências de Estupro Consumado')
plt.xlabel('Município')
plt.ylabel('Número de Ocorrências')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

# Filtrar o DataFrame para incluir apenas as ocorrências de 'Estupro de Vulnerável Consumado'
estupro_vulneravel_df = full_df[full_df['natureza'] == 'Estupro de Vulnerável Consumado']

# Calcular o número total de ocorrências de 'Estupro de Vulnerável Consumado' para cada município
estupro_vulneravel_counts = estupro_vulneravel_df.groupby('municipio')['registros'].sum()

# Selecionar os municípios que tiveram o maior número de ocorrências de 'Estupro de Vulnerável Consumado'
top_municipios_estupro_vulneravel = estupro_vulneravel_counts.nlargest(10)

# Plotar um gráfico de barras com os municípios que tiveram as maiores ocorrências de 'Estupro de Vulnerável Consumado'
plt.figure(figsize=(12, 8))
top_municipios_estupro_vulneravel.plot(kind='bar')
plt.title('Top 10 Municípios com Mais Ocorrências de Estupro de Vulnerável Consumado')
plt.xlabel('Município')
plt.ylabel('Número de Ocorrências')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Violinplot com as ocorrências ao longo dos anos"""

plt.figure(figsize=(12, 8))
sns.violinplot(x='ano', y='registros', data=full_df)
plt.title('Distribuição de Ocorrências por Ano')
plt.xlabel('Ano')
plt.ylabel('Número de Ocorrências (Registros)')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""Carregando Dataset com as Populações dos Municípios"""

uploaded = files.upload()

# Lê os arquivos CSV e adiciona os DataFrames à lista
for filename in uploaded.keys():
    segundodataset = pd.read_csv(filename)
    print(f"Arquivo {filename} carregado com sucesso!")

from sklearn.linear_model import LinearRegression

# Calcular o total de registros de crimes para cada município no full_df
total_registros_por_municipio = full_df.groupby('municipio')['registros'].sum().reset_index()

# Calcular o número mínimo de efetivo policial para cobrir 25% da população
populacao_25_porcento = segundodataset['População'] * 0.25

# Dividir os dados em features (X) e target (y)
X_registros = total_registros_por_municipio[['registros']]
y_populacao = populacao_25_porcento
X_registros_filtered = X_registros[X_registros.index.isin(y_populacao.index)]

# Inicializar e treinar o modelo de Regressão Linear para prever o número mínimo de efetivo policial para cobrir 25% da população
model_populacao = LinearRegression()
model_populacao.fit(X_registros_filtered, y_populacao)

# Fazer previsões para o tamanho do efetivo policial necessário
efetivo_predito_populacao = model_populacao.predict(X_registros)

# Calcular a proporção de crimes solucionados (30% dos registros)
proporcao_crimes_solucionados = total_registros_por_municipio['registros'] * 0.30

# Dividir os dados em features (X) e target (y)
X_crimes = total_registros_por_municipio[['registros']]
y_efetivo = proporcao_crimes_solucionados

# Inicializar e treinar o modelo de Regressão Linear para prever o efetivo policial necessário para solucionar 30% dos crimes
model_efetivo = LinearRegression()
model_efetivo.fit(X_crimes, y_efetivo)

# Fazer previsões para o tamanho do efetivo policial necessário
efetivo_predito_crimes = model_efetivo.predict(X_crimes)

# Exibir as primeiras previsões
print("Previsões para o tamanho do efetivo policial necessário para cobrir 25% da população:")
print(efetivo_predito_populacao)

print("\nPrevisões para o tamanho do efetivo policial necessário para solucionar 30% dos crimes:")
print(efetivo_predito_crimes)

# Definir o tamanho do gráfico
plt.figure(figsize=(10, 5))

# Plotar as predições para o tamanho do efetivo policial necessário para cobrir 25% da população
plt.subplot(1, 2, 1)
plt.scatter(X_registros_filtered, y_populacao, color='blue', label='Dados reais')
plt.plot([y_populacao.min(), y_populacao.max()], [y_populacao.min(), y_populacao.max()], 'k--', lw=2)
plt.title('Predições para efetivo da cobertura de 25% da população')
plt.xlabel('Registros de crimes')
plt.ylabel('População (25%)')
plt.legend()

plt.subplot(1, 2, 2)
plt.scatter(X_crimes, y_efetivo, color='blue', label='Dados reais')
plt.plot([X_crimes.min(), X_crimes.max()], [X_crimes.min(), X_crimes.max()], 'k--', lw=2)
plt.title('Predições para efetivo da solução de 30% dos crimes')
plt.xlabel('Registros de crimes')
plt.ylabel('Efetivo policial')
plt.legend()

# Formatar os números para duas casas decimais nos eixos y
plt.gca().yaxis.set_major_formatter(plt.FormatStrFormatter('%.2f'))

# Exibir o gráfico
plt.tight_layout()
plt.show()