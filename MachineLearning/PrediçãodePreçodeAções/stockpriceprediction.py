# -*- coding: utf-8 -*-
"""StockPricePrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13adr7GbR7HeYJr0garHzMj6xUN_63D8c

Importação das Bibiliotecas
"""

import pandas as pd
import numpy as np
from google.colab import files
from matplotlib import pyplot as plt
import seaborn as sns

"""Importação do Dataset"""

uploaded = files.upload()

for filename in uploaded.keys():

    dataset = pd.read_csv(filename)
    print(f"Arquivo {filename} carregado com sucesso!")

print(dataset.head())

"""Informações Estatísticas"""

dataset.describe()

"""Gráfico dos preços High e Low ao longo dos anos"""

start_date = '2019-06-10'
end_date = '2024-06-10'
mask = (dataset['Date'] >= start_date) & (dataset['Date'] <= end_date)
filtered_data = dataset.loc[mask]

filtered_data.set_index('Date', inplace=True)
filtered_data.index = pd.to_datetime(filtered_data.index)

monthly_data = filtered_data.resample('M').agg({'High': 'max', 'Low': 'min'})

plt.figure(figsize=(14, 7))

plt.subplot(2, 1, 1)
plt.plot(monthly_data.index, monthly_data['High'], label='High', color='green')
plt.title('Trajetória do Preço High ao Longo dos Meses (Jun 2019 - Jun 2024)')
plt.xlabel('Data')
plt.ylabel('Preço High')
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(monthly_data.index, monthly_data['Low'], label='Low', color='red')
plt.title('Trajetória do Preço Low ao Longo dos Meses (Jun 2019 - Jun 2024)')
plt.xlabel('Data')
plt.ylabel('Preço Low')
plt.legend()

plt.tight_layout()
plt.show()

"""Gráfico dos preços fechados"""

start_date = '2019-06-10'
end_date = '2024-06-10'
mask = (dataset['Date'] >= start_date) & (dataset['Date'] <= end_date)
filtered_data = dataset.loc[mask]

filtered_data.set_index('Date', inplace=True)
filtered_data.index = pd.to_datetime(filtered_data.index)

plt.figure(figsize=(14, 7))

plt.subplot(2, 1, 1)
plt.plot(filtered_data.index, filtered_data['Close'], label='Close', color='blue')
plt.title('Trajetória do Preço Fechado (Close) ao Longo do Tempo (Jun 2019 - Jun 2024)')
plt.xlabel('Data')
plt.ylabel('Preço Fechado')
plt.legend()

top_n = 10
top_close = filtered_data.nlargest(top_n, 'Close')
top_close_dates = top_close.index
top_close_values = top_close['Close']

plt.subplot(2, 1, 2)
plt.bar(top_close_dates, top_close_values, color='purple', edgecolor='black')
plt.title(f'Top {top_n} Datas com Maiores Preços Fechados')
plt.xlabel('Data')
plt.ylabel('Preço Fechado')
plt.xticks(rotation=45)

plt.tight_layout()
plt.show()

"""Normalizando os Dados


"""

from sklearn.preprocessing import MinMaxScaler

training_set = dataset.iloc[:, 1:2].values
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(training_set)

"""Incorporando os Timestamps"""

X_train = []
y_train = []
total_size = len(scaled_data)

for i in range(60, total_size):
    X_train.append(scaled_data[i-60:i, 0])
    y_train.append(scaled_data[i, 0])

X_train, y_train = np.array(X_train), np.array(y_train)
X_train = np.reshape(X_train, (X_train.shape[0], X_train.shape[1], 1))

"""Importação do Modelo LSTM"""

from keras.models import Sequential
from keras.layers import LSTM
from keras.layers import Dropout
from keras.layers import Dense

"""Construção do Modelo LSTM"""

model = Sequential()

model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train.shape[1], 1)))
model.add(Dropout(0.2))

model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))

model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

model.fit(X_train, y_train, epochs=100, batch_size=32)

model.summary()

"""Normalização e Construção do LSTM para os Dados de Teste<br>
Predição dos Preços
"""

uploaded = files.upload()

for filename in uploaded.keys():

    datasettest = pd.read_csv(filename)
    print(f"Arquivo {filename} carregado com sucesso!")

print(datasettest.head())

stockpricetestdata = datasettest.iloc[:, 1:2].values

final_dataset = pd.concat((dataset['Open'], datasettest['Open']), axis = 0)

finalscaler = MinMaxScaler(feature_range=(0, 1))
final_dataset_scaled = finalscaler.fit_transform(final_dataset.values.reshape(-1, 1))

X_test = []
for i in range(60, len(final_dataset_scaled)):
    X_test.append(final_dataset_scaled[i-60:i, 0])
X_test = np.array(X_test)

X_test = np.reshape(X_test, (X_test.shape[0], X_test.shape[1], 1))

predicted_stock_price = model.predict(X_test)

predicted_stock_price = scaler.inverse_transform(predicted_stock_price)

print(predicted_stock_price)

plt.figure(figsize=(14, 7))
plt.plot(final_dataset.values, color='blue', label='Preço Real')
plt.plot(range(60, len(predicted_stock_price) + 60), predicted_stock_price, color='red', label='Preço Previsto')
plt.title('Predição de Preços de Ações')
plt.xlabel('Tempo')
plt.ylabel('Preço de Ação')
plt.legend()
plt.show()