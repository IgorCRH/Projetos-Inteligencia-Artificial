# -*- coding: utf-8 -*-
"""PredicaoPrecoCasa.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kVi88mwb8XZ53XluBCkZIow2QHFCJV-q

Importação das Bibiliotecas e Leitura do Dataset
"""

import pandas as pd
import numpy as np
from google.colab import files
from matplotlib import pyplot as plt
import seaborn as sns

uploaded = files.upload()

for filename in uploaded.keys():

    dataset = pd.read_csv(filename)
    print(f"Arquivo {filename} carregado com sucesso!")

print(dataset.head())

"""Reunindo Informações Estatísticas do Dataset"""

estatisticas = dataset.describe()
print(estatisticas)

estatisticasnaonumericas = dataset.describe(include=['object'])
print(estatisticasnaonumericas)

"""Limpando o Dataset"""

valoresnulos = dataset.isnull().sum()
porcentagemvaloresnulos = (valoresnulos / len(dataset)) * 100

valoresnulos_df = pd.DataFrame({
    'Quantidade': valoresnulos,
    'Porcentagem': porcentagemvaloresnulos
})

resultado = pd.concat([valoresnulos, porcentagemvaloresnulos], axis=1,
                      keys=['Quantidade', 'Porcentagem'])
resultado = resultado[resultado['Quantidade'] > 0].sort_values(by="Quantidade", ascending=False)

print (resultado)

# Piscina, Benefícios, Cerca, Beco, Lareira, Fachada e Garagem
dataset["Pool QC"].fillna("No Pool", inplace=True)
dataset['Misc Feature'].fillna('No feature', inplace=True)
dataset['Alley'].fillna('No alley', inplace=True)
dataset['Fence'].fillna('No fence', inplace=True)
dataset['Mas Vnr Type'].fillna('No type', inplace=True)
dataset['Fireplace Qu'].fillna('No Fireplace', inplace=True)
dataset['Lot Frontage'].fillna(0, inplace=True)

colunasdagaragem = [col for col in dataset.columns if col.startswith("Garage")]
dataset[dataset['Garage Cars'].isna()][colunasdagaragem]

dataset[~pd.isna(dataset['Garage Type']) &
        pd.isna(dataset['Garage Qual'])][colunasdagaragem]

dataset['Garage Cars'].fillna(0, inplace=True)
dataset['Garage Area'].fillna(0, inplace=True)
dataset['Garage Yr Blt'].fillna(0, inplace=True)

dataset.loc[~pd.isna(dataset['Garage Type']) &
            pd.isna(dataset['Garage Qual']), "Garage Type"] = "No Garage"

for col in ['Garage Type', 'Garage Finish', 'Garage Qual', 'Garage Cond']:
    dataset[col].fillna('No Garage', inplace=True)

# Porão (Basement)
colunasporao = ['Bsmt Qual', 'Bsmt Cond', 'Bsmt Exposure', 'BsmtFin Type 1', 'BsmtFin Type 2']

dataset[colunasporao] = dataset[colunasporao].fillna("No Basement")
dataset[dataset['Bsmt Half Bath'].isnull()][colunasporao]

dataset['Electrical'].fillna(dataset['Electrical'].mode()[0], inplace=True)

"""Gráfico de Dispersão"""

plt.figure(figsize=(10, 6))
plt.scatter(dataset['Gr Liv Area'], dataset['SalePrice'], alpha=0.5)
plt.title('Gráfico de Dispersão: Preço de Venda (SalePrice) vs (Tamanho da área acima do solo) Gr Liv Area')
plt.xlabel('Gr Liv Area (área habitável acima do solo)')
plt.ylabel('SalePrice (preço de venda)')
plt.grid(True)
plt.show()

"""Removendo Pontos Fora da Curva no Gráfico de Dispersão"""

datasetfiltrado = dataset[dataset['Gr Liv Area'] <= 4000]

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Gr Liv Area', y='SalePrice', data=datasetfiltrado, alpha=0.5)
plt.title('Gráfico de Dispersão: SalePrice vs Gr Liv Area')
plt.xlabel('Gr Liv Area (área habitável acima do solo)')
plt.ylabel('SalePrice (preço de venda)')
plt.grid(True)
plt.show()

dataset.reset_index(drop=True, inplace=True)

"""Violin Plot, Boxplot e Histograma"""

quartis = dataset['SalePrice'].quantile([0.25, 0.5, 0.75])

plt.figure(figsize=(10, 6))
sns.violinplot(y='SalePrice', data=dataset)
plt.title('Violin Plot de SalePrice com Quartis')
plt.ylabel('SalePrice')

for i, quartil in enumerate(quartis):
    plt.axhline(y=quartil, color='r', linestyle='--', label=f'Quartil {i+1}: {quartil:.2f}')

plt.legend()
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(y='SalePrice', data=dataset)
plt.title('Boxplot de SalePrice')
plt.ylabel('SalePrice')
plt.grid(True)
plt.show()

sns.displot(dataset['SalePrice'], kde=True)
plt.title('Displot de SalePrice')
plt.xlabel('SalePrice')
plt.ylabel('Frequência')
plt.grid(True)
plt.show()

"""Correlação"""

# Mapa de Calor das Variáveis
colnumericas = dataset.select_dtypes(include=['float64', 'int64'])

plt.figure(figsize=(12, 9))
sns.heatmap(colnumericas.corr(), annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap de Correlação entre as Variáveis Numéricas do Dataset')
plt.show()

"""Histograma OverallQuality (Qualidade) e Dispersão entre OverallQuality e Preço de Venda (SalePrice)"""

plt.figure(figsize=(10, 6))
sns.histplot(data=dataset, x='Overall Qual', bins=10, kde=True, color='blue')
plt.title('Histograma de Overall Qual')
plt.xlabel('Overall Qual')
plt.ylabel('Frequência')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.displot(data=dataset, x='Overall Qual', y='SalePrice', kind='kde', color='blue')
plt.title('Displot de Overall Qual e SalePrice')
plt.xlabel('Overall Qual')
plt.ylabel('SalePrice')
plt.grid(True)
plt.show()

"""Histograma Gr Liv Area (Área Habitável Acima do Solo), Dispersão e Histograma entre Gr Liv Area e SalePrice (Preço de Venda)"""

plt.figure(figsize=(10, 6))
sns.displot(data=dataset, x='Gr Liv Area', kde=True, color='blue')
plt.title('Displot de Gr Liv Area')
plt.xlabel('Gr Liv Area')
plt.ylabel('Frequência')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
sns.displot(data=dataset, x='Gr Liv Area', y='SalePrice', kind='kde', color='blue')
plt.title('Displot de Gr Liv Area e SalePrice')
plt.xlabel('Gr Liv Area')
plt.ylabel('SalePrice')
plt.grid(True)
plt.show()

"""Dispersão entre Year Built (Ano de Construção), GarageCars, GarageArea e Total de Porões (Total Bsmt Sf) e SalePrice (Preço)"""

plt.figure(figsize=(15, 10))

plt.subplot(2, 2, 1)
sns.scatterplot(data=dataset, x='Year Built', y='SalePrice', color='blue', alpha=0.5)
plt.title('SalePrice vs Year Built')

plt.subplot(2, 2, 2)
sns.scatterplot(data=dataset, x='Garage Cars', y='SalePrice', color='green', alpha=0.5)
plt.title('SalePrice vs Garage Cars')

plt.subplot(2, 2, 3)
sns.scatterplot(data=dataset, x='Garage Area', y='SalePrice', color='orange', alpha=0.5)
plt.title('SalePrice vs Garage Area')

plt.subplot(2, 2, 4)
sns.scatterplot(data=dataset, x='Total Bsmt SF', y='SalePrice', color='red', alpha=0.5)
plt.title('SalePrice vs Total Bsmt SF')

plt.tight_layout()
plt.show()

"""Previsões"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

X = dataset[['Overall Qual', 'Gr Liv Area', 'Year Built', 'Garage Cars', 'Garage Area', 'Total Bsmt SF']]
y = dataset['SalePrice']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
X_train.fillna(X_train.median(), inplace=True)

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f'MSE: {mse}')
print(y_pred)

plt.figure(figsize=(8, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--', lw=2)
plt.xlabel('Valores Reais')
plt.ylabel('Previsões')
plt.title('Comparação entre Valores Reais e Previsões')
plt.show()

"""Modelo RandomForest"""

from sklearn.ensemble import RandomForestRegressor

caracteristicas = ['Gr Liv Area', 'Overall Qual', 'Garage Cars', 'Garage Area', 'Year Built']

rf_model = RandomForestRegressor(random_state=42)
rf_model.fit(X_train, y_train)

rf_feature_importances = rf_model.feature_importances_

selected_rf_feature_importances = [rf_feature_importances[X.columns.get_loc(feature)] for feature in features]

plt.figure(figsize=(10, 6))
plt.bar(caracteristicas, selected_rf_feature_importances)
plt.xlabel('Características')
plt.ylabel('Importância')
plt.title('Importância das Características - RandomForest')
plt.xticks(rotation=45, ha='right')
plt.show()

"""Modelo XGBoost"""

import xgboost as xgb
from xgboost import XGBRegressor

caracteristicas = ['Gr Liv Area', 'Overall Qual', 'Garage Cars', 'Garage Area', 'Year Built']

xgb_model = XGBRegressor(random_state=42)
xgb_model.fit(X_train, y_train)

xgb_feature_importances = xgb_model.get_booster().get_score(importance_type='weight')

selected_xgb_feature_importances = {caracteristica: xgb_feature_importances.get(caracteristica, 0) for caracteristica in caracteristicas}

plt.figure(figsize=(10, 6))
plt.bar(selected_xgb_feature_importances.keys(), selected_xgb_feature_importances.values())
plt.xlabel('Características')
plt.ylabel('Importância')
plt.title('Importância das Características - XGBoost')
plt.xticks(rotation=45, ha='right')
plt.show()